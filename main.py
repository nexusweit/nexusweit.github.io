import asyncio
import sqlite3 as sql

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, WebAppInfo
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.data_base import userExsists, addUser

db = sql.connect('database.db')
cur = db.cursor()

bot = Bot('7071326741:AAEmSUhX0ZBeVqFH7wJKpb0DN7cyJcU-E2M', parse_mode=ParseMode.HTML)
dp = Dispatcher()

router = Router()

def webapp_builder() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.button(
        text='–ò–≥—Ä–∞—Ç—å üß™',
        web_app=WebAppInfo(
            url=""
        )
    )
    return builder.as_markup()

@router.message(CommandStart())
async def start(message: Message) -> None:
    global user_id
    user_id = message.from_user.id
    user = await userExsists(user_id=user_id)
    if user == False:
        start_command = message.text
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != str(message.from_user.id):
                await addUser(user_id=user_id, referrer_id=referrer_id)
                try:
                    await message.answer('<b>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ +3000 üß™</b>')

                    await bot.send_message(referrer_id, "<b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫. –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ +2000 üß™</b>")
                except:
                    pass
            else:
                await bot.send_message(message.from_user.id, "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!")
        else:
            await addUser(user_id=user_id)
    await message.answer(f"<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.username}.</b> –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–ª–∏–∫–µ—Ä üëá",
                         reply_markup=webapp_builder())
    
async def get_id() -> int:
    return user_id
    
async def main() -> None:
    dp.include_router(router)
    
    await bot.delete_webhook(True)
    await dp.start_polling(bot)
    
if __name__ == "__main__":
    asyncio.run(main())